version: '3.8'

services:
  # Vault must be running and initialized before other services
  vault:
    image: hashicorp/vault:latest
    cap_add:
      - IPC_LOCK
    ports:
      - "8200:8200"
    environment:
      - VAULT_DEV_ROOT_TOKEN_ID=root
      - VAULT_DEV_LISTEN_ADDRESS=0.0.0.0:8200
      - VAULT_ADDR=http://0.0.0.0:8200
    volumes:
      - vault-data:/vault/data
      - ./vault/logs:/vault/logs
    command: server -dev -dev-root-token-id=root
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - app-network

  vault-init:
    image: hashicorp/vault:latest
    depends_on:
      vault:
        condition: service_healthy
    volumes:
      - ./vault/scripts:/vault/scripts
      - ./vault/logs:/vault/logs
    entrypoint: /bin/sh
    command: /vault/scripts/init_vault.sh
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
    networks:
      - app-network

  # Service configuration container that retrieves secrets from Vault
  vault-config:
    image: hashicorp/vault:latest
    depends_on:
      vault-init:
        condition: service_completed_successfully
    volumes:
      - ./vault/scripts:/vault/scripts
      - vault-configs:/tmp
    entrypoint: /bin/sh
    command: /vault/scripts/configure_services.sh
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
    networks:
      - app-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --maxmemory 512mb --maxmemory-policy allkeys-lru --appendonly yes
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - app-network
    restart: unless-stopped

  # Database with Vault-managed secrets and performance optimizations
  db:
    image: postgres:17
    depends_on:
      vault:
        condition: service_healthy
      vault-init:
        condition: service_completed_successfully
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_DB=decentralized_id
      - POSTGRES_PASSWORD=VaultSecureDB2024  # Fixed password matching Vault
      - POSTGRES_SHARED_PRELOAD_LIBRARIES=pg_stat_statements
      - POSTGRES_INITDB_ARGS=--data-checksums
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/99-init.sql
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    command: >
      postgres
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=16MB
      -c maintenance_work_mem=64MB
      -c max_connections=200
      -c random_page_cost=1.1
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c log_min_duration_statement=1000
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2'
        reservations:
          memory: 1G
          cpus: '1'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  # RabbitMQ with Vault-managed secrets
  rabbitmq:
    image: rabbitmq:3-management
    depends_on:
      vault-config:
        condition: service_completed_successfully
    ports:
      - "5672:5672"   # RabbitMQ main port
      - "15672:15672" # RabbitMQ management UI
    volumes:
      - vault-configs:/vault-configs:ro
    environment:
      # Fixed credentials matching Vault configuration
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=VaultSecureRMQ2024
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - app-network

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"   # UI
      - "14268:14268"
      - "14250:14250"
      - "4317:4317"     # OTLP gRPC
      - "4318:4318"     # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - app-network

  auth-service:
    build: ./auth-service
    ports:
      - "8004:8000"
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
      - RABBITMQ_HOST=rabbitmq
      - REDIS_URL=redis://redis:6379
      - SERVICE_NAME=auth-service
      - OTLP_ENDPOINT=jaeger:4317
      # Enhanced resource configuration
      - UVICORN_WORKERS=4
      - UVICORN_MAX_REQUESTS=1000
      - UVICORN_MAX_REQUESTS_JITTER=100
    volumes:
      - ./vault:/app/vault:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '2'
          # Additional limits for better resource control
          pids: 1024
        reservations:
          memory: 512M
          cpus: '1'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
      # Enhanced placement constraints
      placement:
        max_replicas_per_node: 1
    # Enhanced health check for better chaos testing resilience
    healthcheck:
      test: ["CMD", "curl", "-f", "-H", "Accept: application/json", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    # Resource monitoring
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - app-network
    restart: unless-stopped
    # Security hardening
    security_opt:
      - no-new-privileges:true
    read_only: false
    tmpfs:
      - /tmp:rw,noexec,nosuid,size=100m

  did-service:
    build: ./did-service
    ports:
      - "8001:8000"
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
      - RABBITMQ_HOST=rabbitmq
      - REDIS_URL=redis://redis:6379
      - SERVICE_NAME=did-service
      - OTLP_ENDPOINT=jaeger:4317
    volumes:
      - ./vault:/app/vault:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.5'
        reservations:
          memory: 384M
          cpus: '0.75'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
    restart: unless-stopped

  credential-service:
    build: ./credential-service
    ports:
      - "8002:8000"
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
      - RABBITMQ_HOST=rabbitmq
      - REDIS_URL=redis://redis:6379
      - SERVICE_NAME=credential-service
      - OTLP_ENDPOINT=jaeger:4317
    volumes:
      - ./vault:/app/vault:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 768M
          cpus: '1.5'
        reservations:
          memory: 384M
          cpus: '0.75'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
    restart: unless-stopped

  verification-service:
    build: ./verification-service
    ports:
      - "8003:8000"
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
      - RABBITMQ_HOST=rabbitmq
      - REDIS_URL=redis://redis:6379
      - SERVICE_NAME=verification-service
      - OTLP_ENDPOINT=jaeger:4317
    volumes:
      - ./vault:/app/vault:ro
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      vault:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1'
        reservations:
          memory: 256M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 15s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - app-network
    restart: unless-stopped

  monitoring-dashboard:
    build: ./monitoring-dashboard
    ports:
      - "8080:8000"
    volumes:
      - ./monitoring-dashboard:/app
      - ./vault:/app/vault:ro
    environment:
      - VAULT_ADDR=http://vault:8200
      - VAULT_TOKEN=root
    depends_on:
      db:
        condition: service_healthy
      vault:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      jaeger:
        condition: service_started
      prometheus:
        condition: service_started
      grafana:
        condition: service_started
      vault-init:
        condition: service_completed_successfully
    networks:
      - app-network
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - app-network

  # Grafana with Vault-managed secrets
  grafana:
    image: grafana/grafana:latest
    depends_on:
      vault-config:
        condition: service_completed_successfully
      prometheus:
        condition: service_started
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - vault-configs:/vault-configs:ro
      - grafana_data:/var/lib/grafana
    environment:
      # Fixed credentials matching Vault configuration
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=VaultSecureGrafana2024
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_ALLOW_EMBEDDING=true
    ports:
      - "3000:3000"
    networks:
      - app-network

volumes:
  prometheus_data:
  grafana_data:
  db-data:
  vault-data:
  vault-configs:  # Shared volume for Vault configuration files
  redis-data:

networks:
  app-network:
    driver: bridge